{
  "type": "Program",
  "elements": [
    {
      "type": "StatementMacroDefinition",
      "macroName": "let",
      "identifiers": [
        "id"
      ],
      "expressions": [
        "expr"
      ],
      "statements": [
        "stmt"
      ],
      "literals": [
        "var",
        "and"
      ],
      "syntaxRules": [
        {
          "pattern": [
            {
              "type": "Paren",
              "elements": [
                {
                  "type": "LiteralKeyword",
                  "name": "var"
                },
                {
                  "type": "Ellipsis",
                  "data": [
                    {
                      "type": "IdentifierVariable",
                      "name": "id"
                    },
                    {
                      "type": "Punctuator",
                      "data": "="
                    },
                    {
                      "type": "ExpressionVariable",
                      "name": "expr"
                    }
                  ],
                  "punctuationMark": "and"
                }
              ]
            },
            {
              "type": "Block",
              "elements": [
                {
                  "type": "Ellipsis",
                  "data": {
                    "type": "StatementVariable",
                    "name": "stmt"
                  },
                  "punctuationMark": ""
                }
              ]
            }
          ],
          "template": {
            "type": "FunctionCall",
            "name": {
              "type": "Function",
              "name": null,
              "params": [
                "id",
                {
                  "type": "Ellipsis"
                }
              ],
              "elements": [
                {
                  "type": "BinaryExpression",
                  "operator": " ",
                  "left": {
                    "type": "Variable",
                    "name": "stmt"
                  },
                  "right": {
                    "type": "Ellipsis"
                  }
                }
              ]
            },
            "arguments": [
              {
                "type": "Variable",
                "name": "expr"
              },
              {
                "type": "Ellipsis"
              }
            ]
          }
        }
      ]
    },
    [
      "let",
      [
        " "
      ],
      "(",
      [],
      "var",
      [
        " "
      ],
      [
        "id1",
        [],
        "=",
        [],
        {
          "type": "Variable",
          "name": "expr1"
        },
        [
          [
            [
              " "
            ],
            "and",
            [
              " "
            ],
            "id2",
            [],
            "=",
            [],
            {
              "type": "Variable",
              "name": "expr"
            }
          ]
        ]
      ],
      [],
      ")",
      [
        " "
      ],
      "{",
      [
        "\n",
        " ",
        " ",
        " ",
        " "
      ],
      [
        {
          "type": "VariableStatement",
          "declarations": [
            {
              "type": "VariableDeclaration",
              "name": "result",
              "value": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "Variable",
                  "name": "id1"
                },
                "right": {
                  "type": "Variable",
                  "name": "id2"
                }
              }
            }
          ]
        },
        [
          [
            [
              "\n",
              " ",
              " ",
              " ",
              " "
            ],
            {
              "type": "ReturnStatement",
              "value": {
                "type": "Variable",
                "name": "result"
              }
            }
          ]
        ]
      ],
      [
        "\n"
      ],
      "}"
    ]
  ]
}