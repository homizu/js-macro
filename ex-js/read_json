#!/usr/local/bin/racket
#lang racket

(require (planet dherman/json:4:=0))
(require racket/pretty)

(define (convert-json js-file-path)
  (let* ((file-name (list-ref (regexp-split #rx"\\.tree" js-file-path) 0))
         (in (open-input-file js-file-path))
         (out-jsexpr (open-output-file (string-append file-name "-jsexpr.scm") #:exists 'truncate/replace))
         (out-sform (open-output-file (string-append file-name "-sform.scm") #:exists 'truncate/replace))
         (jsexpr (read-json in))
         (sform (generalize-jsexpr jsexpr)))
    (pretty-display jsexpr)
    (pretty-write jsexpr out-jsexpr)
    (newline)
    (newline)
    (pretty-display sform)
    (newline)
    (newline)
    (pretty-write sform out-sform)
    (close-input-port in)
    (close-output-port out-jsexpr)
    (close-output-port out-sform)))


(define (generalize-jsexpr jsexpr)
  (cond ((hash? jsexpr) ;; hash table
         (let* ((result (list (string->symbol (hash-ref jsexpr 'type))))
                (rest (hash-remove jsexpr 'type)))
           (append result
                   (hash-map rest 
                             (lambda (key value) (list key (generalize-jsexpr value)))))))
        ((list? jsexpr) ;; list
         (map (lambda (element) (generalize-jsexpr element)) jsexpr))
        (#t ;; other
        jsexpr)))

(define (main args)
  (convert-json (vector-ref args 0)))

(main (current-command-line-arguments))